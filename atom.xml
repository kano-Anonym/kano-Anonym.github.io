<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>kano</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-25T10:51:46.130Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kano</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言中字符函数与字符串函数</title>
    <link href="http://example.com/2023/07/25/c_char_knowledge/"/>
    <id>http://example.com/2023/07/25/c_char_knowledge/</id>
    <published>2023-07-25T10:47:10.000Z</published>
    <updated>2023-07-25T10:51:46.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符函数和字符串函数"><a href="#字符函数和字符串函数" class="headerlink" title="字符函数和字符串函数"></a>字符函数和字符串函数</h1><div class="note note-success">            <h2 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h2>          </div><p>求字符串长度</p><p><code>strlen</code></p><p>长度不受限制的字符串函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">strcpy</span><br><span class="hljs-built_in">strcat</span><br><span class="hljs-built_in">strcmp</span><br></code></pre></td></tr></table></figure><p>长度受限制的字符串函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">strncpy</span><br><span class="hljs-built_in">strncat</span><br><span class="hljs-built_in">strncmp</span><br></code></pre></td></tr></table></figure><p>字符串查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">strstr</span><br>strtok<br></code></pre></td></tr></table></figure><p>错误信息报告</p><p><code>strerror</code></p><p>内存操作函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span><br>memmove<br><span class="hljs-built_in">memset</span><br><span class="hljs-built_in">memcmp</span><br></code></pre></td></tr></table></figure><ol><li><p>函数介绍</p><ol><li><p>strlen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span>;<br>字符串以<span class="hljs-string">&#x27;\0&#x27;</span>作为结束标志，<span class="hljs-built_in">strlen</span>函数返回的是在字符串中<span class="hljs-string">&#x27;\0&#x27;</span>之前出现的字符个数(不包括<span class="hljs-string">&#x27;\0&#x27;</span>)<br><br>参数指向的字符串必须要以<span class="hljs-string">&#x27;\0&#x27;</span>结束<br><br>注意函数的返回值是<span class="hljs-type">size_t</span>，是无符号的<br><br>学会<span class="hljs-built_in">strlen</span>函数的模拟实现<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">my_strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span><br>&#123;<br>     <span class="hljs-type">char</span> *start = str;<br>     <span class="hljs-type">char</span> *end = str;<br>     <span class="hljs-keyword">while</span>(*end != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>     &#123;<br>         end++;<br>     &#125;<br>     <span class="hljs-keyword">return</span> end - start;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>     <span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>     <span class="hljs-type">int</span> len = my_strlen(arr);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>strcpy字符串拷贝函数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *destination,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *source)</span>;<span class="hljs-comment">//前目的后源</span><br>源字符串必须以<span class="hljs-string">&#x27;\0&#x27;</span>结束<br>会将源字符串中的<span class="hljs-string">&#x27;\0&#x27;</span>拷贝到目标空间<br>目标空间必须足够大，以确保能放下源字符串<br>目标空间必须可变(常量字符串不可修改，<span class="hljs-type">const</span>)<br>学会模拟实现<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">my_strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *arr1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *arr2)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(*arr2 != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        *arr1 = *arr2;<br>        arr1 ++;<br>        arr2 ++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(*arr2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>        *arr1 = *arr2;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br>    my_strcpy(arr1,arr2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>strcat字符串追加</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *destination,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *source)</span>;<br>源字符串必须以<span class="hljs-string">&#x27;\0&#x27;</span>结束<br>目标空间必须有足够大，能容纳下源字符串的内容<br>目标空间必须可修改<br>模拟实现    <br><span class="hljs-type">void</span> <span class="hljs-title function_">my_strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *arr1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *arr2)</span><br>&#123; <br>    <span class="hljs-keyword">while</span>(*arr1 != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        arr1 ++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(*arr2 != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        *arr1 = *arr2;<br>        arr1 ++;<br>        arr2 ++;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br>    my_strcat(arr1,arr2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>strcmp字符串比较</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2)</span>;<br>比对应位置上字符的ASCII码大小而非字符串长度<br>第一个字符串大于第二个字符串，则返回大于<span class="hljs-number">0</span>的数字<br>第一个字符串等于第二个字符串，则返回<span class="hljs-number">0</span><br>第一个字符串小于第二个字符串，则返回小于<span class="hljs-number">0</span>的数字<br>模拟实现<br><span class="hljs-type">int</span> <span class="hljs-title function_">my_strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span><br>&#123;<br>    assert(str &amp;&amp; src);<br>    <span class="hljs-keyword">while</span>(*str == *src)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(*str == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        str ++;<br>        src ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> *str - *src;<br>    <span class="hljs-comment">// if (*str &gt; *src)</span><br>    <span class="hljs-comment">//     return 1;</span><br>    <span class="hljs-comment">// else</span><br>    <span class="hljs-comment">//     return -1;</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-type">char</span> *arr2 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    ret = my_strcmp(arr1,arr2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>长度受限制的字符串函数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *destination,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *source,<span class="hljs-type">size_t</span> num)</span>;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">strncat</span><span class="hljs-params">(<span class="hljs-type">char</span> *destination,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *source,<span class="hljs-type">size_t</span> num)</span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2,<span class="hljs-type">size_t</span> num)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;******world&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;Hello,Bit&quot;</span>;<br>    <span class="hljs-type">char</span> arr3[] = <span class="hljs-string">&quot;!I&#x27;m Kano&amp;&quot;</span>;<br>    <span class="hljs-type">char</span> arr4[] = <span class="hljs-string">&quot;Hello,world.I&#x27;m Kano&amp;&quot;</span>;<br>    <span class="hljs-built_in">strncpy</span>(arr1,arr2,<span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">strncat</span>(arr1,arr3,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strncmp</span>(arr1,arr4,<span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n%d\n&quot;</span>,arr1,ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>strstr</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2)</span>;<br><br>在一个字符串中找另一个字符串是否存在<br>存在：返回的是子串第一次出现所在的地址<br>不存在：返回空指针<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello,bit.I&#x27;m Kano&amp;&quot;</span>;<br>    <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;bit&quot;</span>;<br>    <span class="hljs-type">char</span> *str3 = <span class="hljs-built_in">strstr</span>(str1,str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,str3);<br>    <span class="hljs-comment">//bit.I&#x27;m Kano&amp;;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>模拟实现<br><span class="hljs-type">char</span> *<span class="hljs-title function_">my_strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *str2)</span><br>&#123;<br>    assert(str1 &amp;&amp; str2);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1 = str1;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2 = str2;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = str1;<br>    <span class="hljs-keyword">while</span> (*p)<br>    &#123;<br>        s1 = p;<br>        s2 = str2;<br>        <span class="hljs-keyword">while</span> (*s1 != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *s2 != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; (*s1 == *s2))<br>        &#123;<br>            s1 ++;<br>            s2 ++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (*s2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span> *)p;   <br>        &#125;<br>        p ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>strtok</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strtok</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *sep)</span>;<br><br>sep参数是个字符串，定义了用作分隔符的字符集合<br><br>第一个参数指定一个字符串，它包含了<span class="hljs-number">0</span>个或者多个由sep字符串中的一个或者多个分隔符分割的标记<br><br>strtok函数找到str中的下一个标记，并将其用<span class="hljs-string">&#x27;\0&#x27;</span>结尾，返回一个指向这个标记的指针<br>（注：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是临时拷贝的内容并且可修改。）    <br><br>strtok函数的第一个参数不为<span class="hljs-literal">NULL</span>，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置<br><br>strtok函数的第一个参数为<span class="hljs-literal">NULL</span>，函数将在同一个字符串中被保存的位置开始，查找下一个标记<br><br>如果字符串中不存在更多的标记，则返回<span class="hljs-literal">NULL</span>指针<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;zpengwei@bitedu.com&quot;</span>;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">200</span>];<br>    <span class="hljs-built_in">strcpy</span>(arr, arr1);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;.@&quot;</span>;<br>    <span class="hljs-type">char</span> *str = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (str = strtok(arr, p);str != <span class="hljs-literal">NULL</span>; str = strtok(<span class="hljs-literal">NULL</span>,p))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,str);<br>        <span class="hljs-comment">//zpengwei</span><br>        <span class="hljs-comment">//bitedu</span><br>        <span class="hljs-comment">//com</span><br>    &#125;<br>    <span class="hljs-comment">// strtok(arr,p);</span><br>    <span class="hljs-comment">// char *s = strtok(NULL,p);</span><br>    <span class="hljs-comment">// char *s2 = strtok(NULL, p);</span><br>    <span class="hljs-comment">// printf(&quot;%s\n&quot;,arr);</span><br>    <span class="hljs-comment">// printf(&quot;%s\n&quot;,s);</span><br>    <span class="hljs-comment">// printf(&quot;%s\n&quot;,s2);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>strerror</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> errnum)</span>;<br>返回错误码，所对应的错误信息<br>c语言中库函数报错的时候的错误码<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">0</span>));<br>    <span class="hljs-comment">//Success</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">1</span>));<br>    <span class="hljs-comment">//Operation not permitted</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">2</span>));<br>    <span class="hljs-comment">//No such file or directory</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">3</span>));<br>    <span class="hljs-comment">//No such process</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">4</span>));<br>    <span class="hljs-comment">//Interrupted system call</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(<span class="hljs-number">5</span>));<br>    <span class="hljs-comment">//Input/output error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>举例说明使用方法<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    FILE *pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pf == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        <span class="hljs-comment">//errno是c语言自带的全局变量，存放错误码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//读文件</span><br>    fclose(pf);<br>    pf = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>字符分类函数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">iscntrl</span><span class="hljs-comment">//任何控制字符</span><br><span class="hljs-built_in">isspace</span><span class="hljs-comment">//空白字符：空格､换页&#x27;\f&#x27;，换行&#x27;\n&#x27;，回车&#x27;\r&#x27;，制表符&#x27;\t&#x27;或者垂直制表符&#x27;\v&#x27;</span><br><span class="hljs-built_in">isdigit</span><span class="hljs-comment">//十进制数字0~9</span><br><span class="hljs-built_in">isxdigit</span><span class="hljs-comment">//十六进制数字，包括所有十进制数字，小写字母a~z，大写字母A~Z</span><br><span class="hljs-built_in">islower</span><span class="hljs-comment">//小写字母a~z</span><br><span class="hljs-built_in">isupper</span><span class="hljs-comment">//大写字母A~Z</span><br><span class="hljs-built_in">isalpha</span><span class="hljs-comment">//小写字母a~z或大写字母A~Z</span><br><span class="hljs-built_in">isalnum</span><span class="hljs-comment">//字母或者数字，a~z，A~Z，0~9</span><br><span class="hljs-built_in">ispunct</span><span class="hljs-comment">//标点符号，任何不属于数字或者字母的图形字符（可打印）</span><br><span class="hljs-built_in">isgraph</span><span class="hljs-comment">//任何图形字符</span><br><span class="hljs-built_in">isprint</span><span class="hljs-comment">//任何可打印字符，包括图形字符和空白符</span><br></code></pre></td></tr></table></figure></li><li><p>字符转换</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">tolower</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>;<span class="hljs-comment">//大转小</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">toupper</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>;<span class="hljs-comment">//小转大</span><br></code></pre></td></tr></table></figure></li></ol><p> 11.内存函数</p><p> memcpy内存拷贝<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *destination,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *source, <span class="hljs-type">size_t</span> num)</span>;<br><br>不论什么数据类型<br><br><br>例题<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">memcpy</span>(arr2, arr, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//把arr地址开始20个字节的数据放进arr2</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr2[i]);<br>        <span class="hljs-comment">//1 2 3 4 5 0 0 0 0 0</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>模拟实现<br>有时候需要从前向后拷贝，有时候需要从后向前拷贝<br><span class="hljs-type">void</span> *<span class="hljs-title function_">my_memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> num)</span><br>&#123;<br>    assert(dest);<br>    assert(src);<br>    <span class="hljs-comment">//num单位是字节</span><br>    <span class="hljs-comment">// while (num--)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     *(char*)dest = *(char*)src;</span><br>    <span class="hljs-comment">//     dest = (char *)dest + 1;</span><br>    <span class="hljs-comment">//     src = (char *)src + 1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span> (dest &lt; src)<span class="hljs-comment">//前-〉后 如45678诺到12345</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (num--)<br>        &#123;<br>            *(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)src;<br>            dest = (<span class="hljs-type">char</span> *)dest + <span class="hljs-number">1</span>;<br>            src = (<span class="hljs-type">char</span> *)src + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//后-〉前  如45678诺到56789</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(num --)<br>        &#123;<br>            *((<span class="hljs-type">char</span> *)dest + num) = *((<span class="hljs-type">char</span> *)src + num);<br>            <br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p> memcpy只需要实现不重叠的拷贝就可以了<br> memmove是需要实现重叠内存的拷贝 </p><p> memmove<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//c语言中重叠内存的拷贝用memmove实现</span><br>模拟实现<br><span class="hljs-type">void</span> *<span class="hljs-title function_">my_memmove</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> num)</span><br>&#123;<br>    assert(dest);<br>    assert(src);<br>    <span class="hljs-comment">//num单位是字节</span><br>    <span class="hljs-comment">// while (num--)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     *(char*)dest = *(char*)src;</span><br>    <span class="hljs-comment">//     dest = (char *)dest + 1;</span><br>    <span class="hljs-comment">//     src = (char *)src + 1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span> (dest &lt; src)<span class="hljs-comment">//前-〉后</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (num--)<br>        &#123;<br>            *(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)src;<br>            dest = (<span class="hljs-type">char</span> *)dest + <span class="hljs-number">1</span>;<br>            src = (<span class="hljs-type">char</span> *)src + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//后-〉前</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(num --)<br>        &#123;<br>            *((<span class="hljs-type">char</span> *)dest + num) = *((<span class="hljs-type">char</span> *)src + num);<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p> memcmp<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr2,<span class="hljs-type">size_t</span> num)</span>;<br>内存比较<br>&lt;<span class="hljs-number">0</span><br><span class="hljs-number">0</span><br>&gt;<span class="hljs-number">0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">memcmp</span>(arr1, arr2, <span class="hljs-number">16</span>);<span class="hljs-comment">//0</span><br>    <span class="hljs-type">int</span> ret1 = <span class="hljs-built_in">memcmp</span>(arr1, arr2, <span class="hljs-number">20</span>);<span class="hljs-comment">//&lt;0</span><br>    <span class="hljs-type">int</span> ret2 = <span class="hljs-built_in">memcmp</span>(arr2, arr1, <span class="hljs-number">20</span>);<span class="hljs-comment">//&gt;0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n%d\n&quot;</span>,ret,ret1,ret2);<br>    <span class="hljs-comment">//0 -5 5</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p> memset<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr,<span class="hljs-type">int</span> value,<span class="hljs-type">size_t</span> num)</span>;<br><br>内存设置<br>以字节为单位修改<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//小端存储</span><br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">memset</span>(arr, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-comment">//把从arr地址开始后八个字节变为0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">//0 0 3 4 5</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符函数和字符串函数&quot;&gt;&lt;a href=&quot;#字符函数和字符串函数&quot; class=&quot;headerlink&quot; title=&quot;字符函数和字符串函数&quot;&gt;&lt;/a&gt;字符函数和字符串函数&lt;/h1&gt;&lt;div class=&quot;note note-success&quot;&gt;
         </summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针进阶知识</title>
    <link href="http://example.com/2023/07/24/c_point_knowledge/"/>
    <id>http://example.com/2023/07/24/c_point_knowledge/</id>
    <published>2023-07-24T09:01:10.000Z</published>
    <updated>2023-07-25T10:56:09.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针的进阶"><a href="#指针的进阶" class="headerlink" title="指针的进阶"></a>指针的进阶</h1><ol><li>指针就是个变量，用来存放地址，地址唯一标识一块内存空间</li><li>指针的大小是固定的4&#x2F;8个字节（32位平台&#x2F;64位平台）</li><li>指针是有类型，指针的类型决定了指针的+&#x2F;-整数的步长，指针解引用操作的时候的权限</li><li>指针的运算</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>];<span class="hljs-comment">//整型数组</span><br><br><span class="hljs-type">int</span> *parr1[<span class="hljs-number">10</span>];<span class="hljs-comment">//指针数组</span><br><br><span class="hljs-type">int</span> (*parr2)[<span class="hljs-number">10</span>];<span class="hljs-comment">//数组指针</span><br><br><span class="hljs-type">int</span> ((*parr3)[<span class="hljs-number">10</span>])[<span class="hljs-number">5</span>]<span class="hljs-comment">//指针数组（存放数组指针的数组）</span><br><span class="hljs-comment">//parr3有十个元素，每个元素指向一个有五个元素的数组</span><br></code></pre></td></tr></table></figure><h2 id="数组传参和指针传参"><a href="#数组传参和指针传参" class="headerlink" title="数组传参和指针传参"></a>数组传参和指针传参</h2><ol><li><p>一维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>])</span>       <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">20</span>])</span>     <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>        <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> *arr2[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">//一维整型指针数组</span><br>    test(arr);<br>    test2(arr2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">5</span>])</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>              <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">5</span>])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> (*arr)[<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>             <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    test(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p + i));<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> *p = arr;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    print(p,sz);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **ptr)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>,**ptr);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p = &amp;n;<br>    <span class="hljs-type">int</span> **pp = &amp;p;<br>    test(pp);<br>    test(&amp;p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// //Add 和 &amp;Add 都是函数的地址，没有区别</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,Add);</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,&amp;Add);</span><br>    <span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) = &amp;Add;<br>    <span class="hljs-comment">//int (*pf)(int x,int y) = Add;</span><br>    <span class="hljs-comment">//pf是函数指针变量</span><br>    <span class="hljs-type">int</span> sum = (*pf)(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//int sum = pf(3,5);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有趣的代码<code>( *( void(*)() )0 )()</code>:</p><ol><li><p>( void(*)() )0 –&gt;把0当作一个函数的地址，强制类型转换</p></li><li><p>把0直接转换成一个void(*)()的函数指针，然后去调用0地址处的函数</p></li></ol><p>有趣的代码<code>void (* signal(int ,void(*)(int)) )(int);</code></p><ol><li>上述代码是一次函数声明</li><li>声明的函数叫：signal</li><li>signal函数的第一个参数是int类型</li><li>signal函数的第二个参数是一个函数指针类型，该函数指针指向的函数参数是int，返回值是void</li><li>signal函数的返回类型也是一个函数指针类型，该函数指向的函数参数是int，返回类型是void</li><li><code>typedef void(* pf_t)(int);</code>&#x2F;&#x2F;把void(*)(int)函数指针类型换名为pf_t</li><li><code>pf_t signal(int,pf_t);</code></li></ol><h2 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h2><p>函数指针</p><p><code>int(*pf)(int,int)</code></p><p>函数指针数组</p><p><code>int (*pfArr[4])(int,int)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//int (*pt)(const char *str,double d) = &amp;test;</span><br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;Add,Sub&#125;;<br>    <span class="hljs-type">int</span> sum = pfArr[<span class="hljs-number">0</span>](<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> anw = pfArr[<span class="hljs-number">1</span>](<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,sum,anw);<span class="hljs-comment">//3 2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用函数指针数组实现简易计算器</p><p>函数指针数组的实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//写一个计算器</span><br><span class="hljs-comment">//加减乘除</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********1.add  2.sub*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********3.mul  4.div*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********0.exit      *********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Mul</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x / y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> anw = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">5</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;<span class="hljs-number">0</span>, Add, Sub, Mul, Div&#125;;<br>    <span class="hljs-keyword">do</span> &#123;<br>    Menu();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br>    <span class="hljs-keyword">if</span>(input == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>(input &gt;= <span class="hljs-number">1</span> &amp;&amp; input &lt;= <span class="hljs-number">4</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个操作数:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        anw = pfArr[input](x,y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,anw);<br>    &#125;<br>    <span class="hljs-comment">// switch (input) &#123;</span><br>    <span class="hljs-comment">// case 1:printf(&quot;%d\n&quot;,Add(x, y));break;</span><br>    <span class="hljs-comment">// case 2:printf(&quot;%d\n&quot;,Sub(x, y));break;</span><br>    <span class="hljs-comment">// case 3:printf(&quot;%d\n&quot;,Mul(x, y));break;</span><br>    <span class="hljs-comment">// case 4:printf(&quot;%d\n&quot;,Div(x, y));break;</span><br>    <span class="hljs-comment">// case 0:printf(&quot;QUIT\n&quot;);break;</span><br>    <span class="hljs-comment">// default:printf(&quot;ERROR\n&quot;);break;</span><br>    <span class="hljs-comment">// &#125;</span><br>    &#125;<span class="hljs-keyword">while</span> (input);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br>函数指针<br><span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>函数指针数组<br><span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>指向函数指针数组的指针<br><span class="hljs-type">int</span> (* (*ptr)[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &amp;pfArr<br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个通过函数指针调用的函数。如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *c[] = &#123;<span class="hljs-string">&quot;ENTER&quot;</span>,<span class="hljs-string">&quot;NEW&quot;</span>,<span class="hljs-string">&quot;POINT&quot;</span>,<span class="hljs-string">&quot;FIRST&quot;</span>&#125;;<br>    <span class="hljs-type">char</span> **cp[] = &#123;c + <span class="hljs-number">3</span>, c + <span class="hljs-number">2</span>, c + <span class="hljs-number">1</span>, c&#125;;<br>    <span class="hljs-type">char</span> ***cpp = cp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,**++cpp);         <span class="hljs-comment">//POINT</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*--*++cpp+<span class="hljs-number">3</span>);     <span class="hljs-comment">//ER</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*cpp[<span class="hljs-number">-2</span>]+<span class="hljs-number">3</span>);      <span class="hljs-comment">//ST</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,cpp[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);   <span class="hljs-comment">//EW</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针的进阶&quot;&gt;&lt;a href=&quot;#指针的进阶&quot; class=&quot;headerlink&quot; title=&quot;指针的进阶&quot;&gt;&lt;/a&gt;指针的进阶&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;指针就是个变量，用来存放地址，地址唯一标识一块内存空间&lt;/li&gt;
&lt;li&gt;指针的大小是固定的4&amp;#x2F</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
</feed>
