<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>kano</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-26T00:50:02.700Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kano</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言深度剖析数据在内存中的存储</title>
    <link href="http://example.com/2023/07/26/c_type_knowledge/"/>
    <id>http://example.com/2023/07/26/c_type_knowledge/</id>
    <published>2023-07-26T00:46:10.000Z</published>
    <updated>2023-07-26T00:50:02.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据类型详细介绍"><a href="#一-数据类型详细介绍" class="headerlink" title="一.数据类型详细介绍"></a>一.数据类型详细介绍</h2><p>char         &#x2F;&#x2F;字符数据类型 <code>1byte</code></p><p>short        &#x2F;&#x2F;短整型 <code>2byte</code></p><p>int          &#x2F;&#x2F;整型 <code>4byte</code></p><p>long         &#x2F;&#x2F;长整型 <code>&gt;=int</code></p><p>long long    &#x2F;&#x2F;更长的整型 <code>&gt;=long</code></p><p>float        &#x2F;&#x2F;单精度浮点数 <code>4byte</code></p><p>double       &#x2F;&#x2F;双精度浮点数 <code>8yte</code></p><h3 id="1-1类型的基本归类"><a href="#1-1类型的基本归类" class="headerlink" title="1.1类型的基本归类"></a>1.1类型的基本归类</h3><ol><li>整型家族：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span><br>    <span class="hljs-type">signed</span> <span class="hljs-type">char</span><br><span class="hljs-type">short</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>[<span class="hljs-type">int</span>]<br>    <span class="hljs-type">signed</span> <span class="hljs-type">short</span>[<span class="hljs-type">int</span>] <span class="hljs-comment">//short = signed short</span><br><span class="hljs-type">int</span> <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br>    <span class="hljs-type">signed</span> <span class="hljs-type">int</span>   <span class="hljs-comment">//int = signed int </span><br><span class="hljs-type">long</span> <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><br>    <span class="hljs-type">signed</span> <span class="hljs-type">long</span>  <span class="hljs-comment">//long = signed long</span><br></code></pre></td></tr></table></figure></li><li>浮点数家族<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span>    <br><span class="hljs-type">double</span><br></code></pre></td></tr></table></figure></li><li>构造类型 (自定义类型)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">数组类型<br>结构体类型 `<span class="hljs-class"><span class="hljs-keyword">struct</span>`</span><br><span class="hljs-class">枚举类型 `<span class="hljs-title">enum</span>`</span><br><span class="hljs-class">联合类型 `<span class="hljs-title">union</span>`</span><br></code></pre></td></tr></table></figure></li><li>指针类型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *pi;<br><span class="hljs-type">char</span> *pc;<br><span class="hljs-type">float</span> *pf;<br><span class="hljs-type">void</span> *pv;<br></code></pre></td></tr></table></figure></li><li>空类型<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">void</span>表示空类型(无类型)<br>通常应用于函数的返回类型，函数的参数，指针类型<br></code></pre></td></tr></table></figure></li></ol><h2 id="二-整型再内存中的存储：原码反码补码"><a href="#二-整型再内存中的存储：原码反码补码" class="headerlink" title="二.整型再内存中的存储：原码反码补码"></a>二.整型再内存中的存储：原码反码补码</h2><h3 id="2-1-原码，反码，补码"><a href="#2-1-原码，反码，补码" class="headerlink" title="2.1 原码，反码，补码"></a>2.1 原码，反码，补码</h3><p>三种方法均有符号位和数值位两部分，0正1负</p><p>对于整型来说，数据存放内存中其实存放的是补码</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">原因:</span><br>·是使用补码可以将符号位和数值域统一处理；<br>·加法和减法也可以统一处理（CPU）只有加法器；<br>·原码和补码相互转换其运算过程相同，不需要额外电路<br></code></pre></td></tr></table></figure><p><code>正数的原，反，补码都相同</code></p><p><code>负#整数#的三种表示方法各不相同</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//4byte = 32 bit</span><br><span class="hljs-comment">//00000000000000000000000000010100原</span><br><span class="hljs-comment">//00000000000000000000000000010100反</span><br><span class="hljs-comment">//00000000000000000000000000010100补</span><br><br><span class="hljs-type">int</span> b = <span class="hljs-number">-10</span>；<br><span class="hljs-comment">//10000000000000000000000000001010原</span><br><span class="hljs-comment">//11111111111111111111111111110101反</span><br><span class="hljs-comment">//11111111111111111111111111110110补fffffff6</span><br><br><span class="hljs-type">int</span> c = <span class="hljs-number">1</span> - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//00000000000000000000000000000001//1补码</span><br><span class="hljs-comment">//11111111111111111111111111111111//-1补码</span><br><span class="hljs-comment">//(1)000000000000000000000000000000//进位超出范围舍弃，结果为0</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">补码-&gt;原码：</span><br><span class="hljs-comment">·先-1再取反</span><br><span class="hljs-comment">·先取反再+1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="三-大小端字节序-介绍及判断"><a href="#三-大小端字节序-介绍及判断" class="headerlink" title="三.大小端字节序 介绍及判断"></a>三.大小端字节序 介绍及判断</h2><ol><li><p>什么是大小端</p><p>大端（存储）模式：是指数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中</p><p>小端（存储）模式：是指数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x11223344</span> <span class="hljs-comment">//(高位-&gt;低位)11高位，44低位</span><br><span class="hljs-comment">//若地址是由低-&gt;高，则</span><br><span class="hljs-comment">//小端：44 33 22 11</span><br><span class="hljs-comment">//大端：11 22 33 44</span><br></code></pre></td></tr></table></figure><ol start="2"><li>为什么要有大小端</li></ol><p>对于位数大于8的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题，因此就导致了大小端存储模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//设计一个小程序来判断当前机器的字节序</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 0x 00 00 00 01</span><br>    <span class="hljs-comment">//小 01 00 00 00</span><br>    <span class="hljs-comment">//大 00 00 00 01</span><br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*)&amp;a;<br>    <span class="hljs-keyword">if</span>(*p == <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小端\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大端\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//%u是打印无符号整型，认为内存中存放的补码对应的是一个无符号数</span><br>    <span class="hljs-comment">//%d是打印有符号整型，认为内存中存放的补码对应的是一个有符号数</span><br>    <span class="hljs-type">char</span> a = <span class="hljs-number">-128</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-浮点型在内存中的存储解析"><a href="#四-浮点型在内存中的存储解析" class="headerlink" title="四.浮点型在内存中的存储解析"></a>四.浮点型在内存中的存储解析</h2><p>浮点数家族包括<code>float,double,long double</code></p><p>浮点数类型的取值范围限定在<code>float.h</code>中</p><p>整型的取值范围在<code>limits.h</code>中</p><h3 id="IEEE754标准"><a href="#IEEE754标准" class="headerlink" title="IEEE754标准"></a>IEEE754标准</h3><p>· (-1)^S<em>M</em>2^E</p><p>· (-1)^S表示符号位，当S&#x3D;0，V为正数；当S&#x3D;1，V为负数</p><p>· M表示有效数字，大于等于1，小于2</p><p>· 2^E表示指数位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">v = <span class="hljs-number">5.5</span> = <span class="hljs-number">101.1</span>(<span class="hljs-number">2</span>) = <span class="hljs-number">1.011</span> * <span class="hljs-number">2</span> ^ <span class="hljs-number">2</span><br>  = (<span class="hljs-number">-1</span>)^<span class="hljs-number">0</span> * <span class="hljs-number">1.011</span> * <span class="hljs-number">2</span> ^ <span class="hljs-number">2</span><br>  S = <span class="hljs-number">0</span>   M = <span class="hljs-number">1.011</span>   E = <span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><h4 id="Bubblesort函数只能排序整型数据"><a href="#Bubblesort函数只能排序整型数据" class="headerlink" title="Bubblesort函数只能排序整型数据"></a>Bubblesort函数只能排序整型数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sz - i <span class="hljs-number">-1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-type">int</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(arr + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-comment">//对整形数据进行排序</span><br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    BubbleSort(arr,<span class="hljs-number">10</span>);<br>    Print(arr,sz);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试qsort排序整型数据"><a href="#测试qsort排序整型数据" class="headerlink" title="测试qsort排序整型数据"></a>测试qsort排序整型数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Cmp_int</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e2)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span>*)e1 - *(<span class="hljs-type">int</span>*)e2);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    qsort(arr, sz, <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]), Cmp_int);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    void qsort(void *base,       //待排序数据的起始地址</span><br><span class="hljs-comment">                size_t num,      //待排序数据的元素个数</span><br><span class="hljs-comment">                size_t size,     //待排序数据元素的大小（单位是字节）</span><br><span class="hljs-comment">                int (*cmp)(const void*,const void*)    //比较两个元素大小的函数指针</span><br><span class="hljs-comment">               )</span><br><span class="hljs-comment">    */</span><br>    Print(arr, sz);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试qsort函数排序结构体数据"><a href="#测试qsort函数排序结构体数据" class="headerlink" title="测试qsort函数排序结构体数据"></a>测试qsort函数排序结构体数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_stu_by_name</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e2)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(((<span class="hljs-keyword">struct</span> Stu*)e1)-&gt;name,((<span class="hljs-keyword">struct</span> Stu*)e2)-&gt;name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp_stu_by_age</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e2)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">struct</span> Stu *)e1)-&gt;age - ((<span class="hljs-keyword">struct</span> Stu*)e2)-&gt;age;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_stu</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu *s,<span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d\n&quot;</span>,s[i].name,s[i].age);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">s</span>[] =</span> &#123;&#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">55</span>&#125;,&#123;<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">40</span>&#125;,&#123;<span class="hljs-string">&quot;chengfuming&quot;</span>,<span class="hljs-number">20</span>&#125;&#125;;<br>    <span class="hljs-comment">//按照名字比较</span><br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(s) / <span class="hljs-keyword">sizeof</span>(s[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">//qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);</span><br>    <span class="hljs-comment">//按年龄比较</span><br>    qsort(s, sz, <span class="hljs-keyword">sizeof</span>(s[<span class="hljs-number">0</span>]), cmp_stu_by_age);<br>    print_stu(s,sz);<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>qsort函数可以排序任意类型的数据</p>          </div><h4 id="在冒泡排序的基础上模拟qsort"><a href="#在冒泡排序的基础上模拟qsort" class="headerlink" title="在冒泡排序的基础上模拟qsort"></a>在冒泡排序的基础上模拟qsort</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Swap</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf1, <span class="hljs-type">char</span> *buf2, <span class="hljs-type">int</span> width)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; width; i++)<br>    &#123;<br>        <span class="hljs-type">char</span> temp = *buf1;<br>        *buf1 = *buf2;<br>        *buf2 = temp;<br>        buf1++;<br>        buf2++;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">QSort</span><span class="hljs-params">(<span class="hljs-type">void</span> *base,<span class="hljs-type">int</span> sz,<span class="hljs-type">int</span> width,<span class="hljs-type">int</span> (*cmp)(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> *e2))</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sz - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cmp((<span class="hljs-type">char</span> *)base + j*width,(<span class="hljs-type">char</span> *)base + (j + <span class="hljs-number">1</span>) * width) &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-comment">//交换</span><br>                Swap((<span class="hljs-type">char</span> *)base + j*width,(<span class="hljs-type">char</span> *)base + (j + <span class="hljs-number">1</span>) * width,width);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    QSort(arr, sz, <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]), Cmp_int);<br>    Print(arr, sz);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">s</span>[] =</span> &#123;&#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">55</span>&#125;,&#123;<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">40</span>&#125;,&#123;<span class="hljs-string">&quot;chengfuming&quot;</span>,<span class="hljs-number">20</span>&#125;&#125;;<br>    <span class="hljs-comment">//按照名字比较</span><br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(s) / <span class="hljs-keyword">sizeof</span>(s[<span class="hljs-number">0</span>]);<br>    QSort(s, sz, <span class="hljs-keyword">sizeof</span>(s[<span class="hljs-number">0</span>]), cmp_stu_by_name);<br>    print_stu(s,sz);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//test1();//测试冒泡排序</span><br>    <span class="hljs-comment">//test2();//测试qsort函数(qsort采用的是快排)</span><br>    <span class="hljs-comment">//test3();</span><br>    <span class="hljs-comment">//test4();</span><br>    test5();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-数据类型详细介绍&quot;&gt;&lt;a href=&quot;#一-数据类型详细介绍&quot; class=&quot;headerlink&quot; title=&quot;一.数据类型详细介绍&quot;&gt;&lt;/a&gt;一.数据类型详细介绍&lt;/h2&gt;&lt;p&gt;char         &amp;#x2F;&amp;#x2F;字符数据类型 &lt;code&gt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
  <entry>
    <title>C语言结构体基础知识</title>
    <link href="http://example.com/2023/07/26/c_struct_knowledge/"/>
    <id>http://example.com/2023/07/26/c_struct_knowledge/</id>
    <published>2023-07-26T00:36:20.000Z</published>
    <updated>2023-07-26T00:49:56.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1;  <span class="hljs-comment">//1</span><br>    <span class="hljs-type">int</span> i;    <span class="hljs-comment">//4</span><br>    <span class="hljs-type">char</span> c2;  <span class="hljs-comment">//1</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S2</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1;    <span class="hljs-comment">//1</span><br>    <span class="hljs-type">char</span> c2;    <span class="hljs-comment">//1</span><br>    <span class="hljs-type">int</span> i;      <span class="hljs-comment">//4</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S3</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">double</span> d;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> i;<br>&#125;;<br><span class="hljs-comment">/*d首先从0开始，占8个字节，0~7，然后c是char类型，大小一个字节，小于默认对齐数，所以c放在8位置，接下来i是int类型，占4个字节，小于默认对齐数，所以取4的倍数作为i的存放地址，及从12开始放，12~15，总大小0~15共16个字节，是8的倍数*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S4</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S3</span> <span class="hljs-title">s3</span>;</span><br>    <span class="hljs-type">double</span> d;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span> <span class="hljs-title">s1</span>;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1, c1));<span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1, i)); <span class="hljs-comment">//4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1, c2));<span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S1));    <span class="hljs-comment">//12</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2, c1)); <span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2, c2)); <span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2, i));  <span class="hljs-comment">//4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S2));     <span class="hljs-comment">//8</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S3, d)); <span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S3, c)); <span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S3, i)); <span class="hljs-comment">//12</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S3));    <span class="hljs-comment">//16</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4, c1)); <span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4, s3)); <span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4, d));  <span class="hljs-comment">//24</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S4));     <span class="hljs-comment">//32</span><br><br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,sizeof(struct S1)); //12</span><br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,sizeof(struct S2)); // 8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体对齐规则"><a href="#结构体对齐规则" class="headerlink" title="结构体对齐规则"></a>结构体对齐规则</h2><ol><li><p>第一个成员在与结构体变量偏移量为0的地址处</p></li><li><p>其他成员变量要对齐到某个数字(对齐数)的整数倍的地址处</p><p> <code>对齐数=编译器默认的一个对齐数与该成员大小的较小值</code></p></li><li><p>结构体总大小为最大对齐数(每个成员变量都有一个对齐数)的整数倍</p></li><li><p>如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数(含嵌套结构体的对齐数)的整数倍</p></li></ol><p>设置默认对齐数<br><code>#pragma pack(int)</code></p><p>恢复默认对齐数<br><code>#pragma pack()</code></p><h2 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> num;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> S s)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>,s.data[<span class="hljs-number">0</span>],s.data[<span class="hljs-number">1</span>],s.data[<span class="hljs-number">2</span>],s.num);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> S *p)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>,p-&gt;data[<span class="hljs-number">0</span>],p-&gt;data[<span class="hljs-number">1</span>],p-&gt;data[<span class="hljs-number">2</span>],p-&gt;num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,(*p).data[<span class="hljs-number">0</span>],(*p).num);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">ss</span> =</span> &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<span class="hljs-number">5</span>&#125;;<br>    print1(ss);<br>    print2(&amp;ss);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h2><ol><li>位段的成员必须是int､unsigned int或signed int</li><li>位段的成员名后边有一个冒号和一个数字</li></ol><h3 id="位段的内存分配"><a href="#位段的内存分配" class="headerlink" title="位段的内存分配"></a>位段的内存分配</h3><ol><li>位段的成员可以是int､unsigned int､signed int或者是char类型</li><li>位段的空间上是按照需要以4个字节(int)或者1个字节(char)的方式来开辟的</li><li>位段涉及很多不确定因素，位段是不跨平台的，注重可移植性的程序应该避免使用位段</li></ol><h3 id="位段的跨平台问题"><a href="#位段的跨平台问题" class="headerlink" title="位段的跨平台问题"></a>位段的跨平台问题</h3><ol><li>int位段被当成有符号数还是无符号数是不确定的 </li><li>位段中最大位的数目不能确定，(16位机器最大16，32位机器最大32，写成27，在16位机器会出问题)</li><li>位段中的成员在内存重从左向右分配还是从右向左分配尚未定义</li><li>当一个结构包含两个位段，第二个位段成员比较大，无法容纳第一个位段剩余的位时，是舍弃剩余的位还是利用，这是不确定的<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//位段</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> d;<br>&#125;;<br><span class="hljs-comment">//A就是一个位段类型</span><br><span class="hljs-comment">//位段-其中的位其实是二进制位(bit位)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//int型先分配4byte = 32bit</span><br>    <span class="hljs-type">int</span> _a:<span class="hljs-number">2</span>;   <span class="hljs-comment">//use 2bit,  32 - 2 = 30bit</span><br>    <span class="hljs-type">int</span> _b:<span class="hljs-number">5</span>;   <span class="hljs-comment">//use 5bit,  30 - 5 = 25bit</span><br>    <span class="hljs-type">int</span> _c:<span class="hljs-number">10</span>;  <span class="hljs-comment">//use 10bit, 25 - 10 = 15bit</span><br>    <span class="hljs-type">int</span> _d:<span class="hljs-number">30</span>;  <span class="hljs-comment">//15 &lt; 30,not enough,int型,再分4byte,15 + 32 - 30 = 17bit</span><br>    <span class="hljs-comment">//总共分配了8bit</span><br>&#125;;<br><span class="hljs-comment">//47bit</span><br><span class="hljs-comment">//1byte = 8bit</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> a:<span class="hljs-number">3</span>;<br>    <span class="hljs-type">char</span> b:<span class="hljs-number">4</span>;<br>    <span class="hljs-type">char</span> c:<span class="hljs-number">5</span>;<br>    <span class="hljs-type">char</span> d:<span class="hljs-number">4</span>;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,sizeof(struct S));//16</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,sizeof(struct A));//8</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    s.a = <span class="hljs-number">10</span>;<br>    s.b = <span class="hljs-number">12</span>;<br>    s.c = <span class="hljs-number">3</span>;<br>    s.d = <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>,s.a,s.b,s.c,s.d);<span class="hljs-comment">//2 -4 3 4</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>位段在合适的情况下可以节省空间</p><p>位段不存在内存对齐 </p>          </div></li></ol><p><img src="/../img/earth.gif" alt="The earth"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构体内存对齐&quot;&gt;&lt;a href=&quot;#结构体内存对齐&quot; class=&quot;headerlink&quot; title=&quot;结构体内存对齐&quot;&gt;&lt;/a&gt;结构体内存对齐&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
  <entry>
    <title>C语言动态内存基础知识</title>
    <link href="http://example.com/2023/07/26/c_mem_knowledge/"/>
    <id>http://example.com/2023/07/26/c_mem_knowledge/</id>
    <published>2023-07-26T00:35:10.000Z</published>
    <updated>2023-07-26T00:49:50.090Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>C语言精华之一</p>          </div><h1 id="动态内存函数的介绍"><a href="#动态内存函数的介绍" class="headerlink" title="动态内存函数的介绍"></a>动态内存函数的介绍</h1><p>动态内存分配实在堆区完成</p><h2 id="malloc-和-free"><a href="#malloc-和-free" class="headerlink" title="malloc 和 free"></a>malloc 和 free</h2><h3 id="malloc函数和free"><a href="#malloc函数和free" class="headerlink" title="malloc函数和free"></a>malloc函数和free</h3><p>void *malloc(size_t size);<br>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针<br>如果开辟成功则返回一个指向开辟好空间的指针<br>如果开辟失败，则返回一个NULL指针，因此其返回值一定要做检查</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-type">int</span> *q = p;<br>    <span class="hljs-comment">//   int *p = (int *)malloc(-3);</span><br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//使用</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        *p = i;<br>        p++;<br>    &#125;<br>    <span class="hljs-comment">//输出，在上一个循环中，p不断后移，指向最后</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,(*q));<br>        q++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">//释放</span><br>    <span class="hljs-built_in">free</span>(q);<br>    p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h2><p>void *calloc(size_t num,size_t size);<br>函数的功能是为num个大小为size的元素开辟一块空间，并且把空间的每个字节初始化为0<br>与malloc的区别只在与calloc会在返回地址之前把申请的空间的每个字节初始化为全0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//40个字节</span><br>    <span class="hljs-comment">//malloc(40)</span><br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">10</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        *(p + i) = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*p);<br>        p ++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h2><p>realloc函数的出现让动态内存管理更加灵活<br>realloc函数可以做到对动态开辟内存大小的调整<br>void *realloc(void *ptr,size_t size);<br>ptr是要调整的内存地址<br>size调整之后新大小<br>返回值为调整之后的内存起始位置<br>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的内存空间<br>realloc在调整内存空间的是存在两种情况：</p><ol><li><p>原有空间之后有足够大空间</p></li><li><p>若传的是空指针，realloc(NULL,40)就等价于malloc(40)</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        *(p + i) = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">//增加空间</span><br>    <span class="hljs-type">int</span> *q = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">80</span>);<br>    <span class="hljs-keyword">if</span> (q != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        p = q;<br>        q = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        *(p + i) = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="柔性数组"><a href="#柔性数组" class="headerlink" title="柔性数组"></a>柔性数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">0</span>];<span class="hljs-comment">//柔性数组成员</span><br>&#125;type_a;<br></code></pre></td></tr></table></figure><h3 id="柔性数组一"><a href="#柔性数组一" class="headerlink" title="柔性数组一"></a>柔性数组一</h3><p>结构体中的最后一个元素允许是未知大小的数组，这就叫做<code>柔性数组</code>成员</p><p>特点</p><ol><li>结构中的柔性数组成员前面必须至少有一个其他成员</li><li>sizeof返回的这种结构大小不包括柔性数组的内存</li><li>包含柔性数组成员的结构用malloc()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">float</span> s;<br>    <span class="hljs-type">int</span> arr[];<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> *<span class="hljs-title">ps</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> *<span class="hljs-title">p</span> =</span> (<span class="hljs-keyword">struct</span> S *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S) + <span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        ps = p;<br>    ps-&gt;n = <span class="hljs-number">100</span>;<br>    ps-&gt;s = <span class="hljs-number">5.5f</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ps-&gt;arr[i]);<br>    &#125; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ps-&gt;arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">//扩展</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> *<span class="hljs-title">pps</span> =</span> <span class="hljs-built_in">realloc</span>(ps,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S) + <span class="hljs-number">8</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (pps == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        ps = pps;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ps-&gt;arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ps-&gt;arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="柔性数组二"><a href="#柔性数组二" class="headerlink" title="柔性数组二"></a>柔性数组二</h3><p>另外一个例子(非柔性数组，结构体里放指针)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">float</span> s;<br>    <span class="hljs-type">int</span> *arr;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> *<span class="hljs-title">ps</span> =</span> (<span class="hljs-keyword">struct</span> S *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S));<br>    ps-&gt;n = <span class="hljs-number">100</span>;<br>    ps-&gt;s = <span class="hljs-number">5.5f</span>;<br>    <span class="hljs-type">int</span> *ptr = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (ptr == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        ps-&gt;arr = ptr;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,(ps-&gt;arr + i));<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ps-&gt;arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">//扩展</span><br>    <span class="hljs-type">int</span> *str = <span class="hljs-built_in">realloc</span>(ps-&gt;arr, <span class="hljs-number">8</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span>(str == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        ps-&gt;arr = str;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,(ps-&gt;arr + i));<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(ps-&gt;arr + i));<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//释放</span><br>    <span class="hljs-built_in">free</span>(ps-&gt;arr);<br>    ps-&gt;arr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">free</span>(ps);<br>    ps = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note note-danger&quot;&gt;
            &lt;p&gt;C语言精华之一&lt;/p&gt;
          &lt;/div&gt;



&lt;h1 id=&quot;动态内存函数的介绍&quot;&gt;&lt;a href=&quot;#动态内存函数的介绍&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针进阶知识</title>
    <link href="http://example.com/2023/07/24/c_point_knowledge/"/>
    <id>http://example.com/2023/07/24/c_point_knowledge/</id>
    <published>2023-07-24T09:01:10.000Z</published>
    <updated>2023-07-26T00:49:46.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针的进阶"><a href="#指针的进阶" class="headerlink" title="指针的进阶"></a>指针的进阶</h1><ol><li>指针就是个变量，用来存放地址，地址唯一标识一块内存空间</li><li>指针的大小是固定的4&#x2F;8个字节（32位平台&#x2F;64位平台）</li><li>指针是有类型，指针的类型决定了指针的+&#x2F;-整数的步长，指针解引用操作的时候的权限</li><li>指针的运算</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>];<span class="hljs-comment">//整型数组</span><br><br><span class="hljs-type">int</span> *parr1[<span class="hljs-number">10</span>];<span class="hljs-comment">//指针数组</span><br><br><span class="hljs-type">int</span> (*parr2)[<span class="hljs-number">10</span>];<span class="hljs-comment">//数组指针</span><br><br><span class="hljs-type">int</span> ((*parr3)[<span class="hljs-number">10</span>])[<span class="hljs-number">5</span>]<span class="hljs-comment">//指针数组（存放数组指针的数组）</span><br><span class="hljs-comment">//parr3有十个元素，每个元素指向一个有五个元素的数组</span><br></code></pre></td></tr></table></figure><h2 id="数组传参和指针传参"><a href="#数组传参和指针传参" class="headerlink" title="数组传参和指针传参"></a>数组传参和指针传参</h2><ol><li><p>一维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>])</span>       <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">20</span>])</span>     <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>        <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> *arr2[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">//一维整型指针数组</span><br>    test(arr);<br>    test2(arr2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">5</span>])</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>              <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">5</span>])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> (*arr)[<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>             <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    test(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p + i));<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> *p = arr;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    print(p,sz);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **ptr)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>,**ptr);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p = &amp;n;<br>    <span class="hljs-type">int</span> **pp = &amp;p;<br>    test(pp);<br>    test(&amp;p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// //Add 和 &amp;Add 都是函数的地址，没有区别</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,Add);</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,&amp;Add);</span><br>    <span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) = &amp;Add;<br>    <span class="hljs-comment">//int (*pf)(int x,int y) = Add;</span><br>    <span class="hljs-comment">//pf是函数指针变量</span><br>    <span class="hljs-type">int</span> sum = (*pf)(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//int sum = pf(3,5);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有趣的代码<code>( *( void(*)() )0 )()</code>:</p><ol><li><p>( void(*)() )0 –&gt;把0当作一个函数的地址，强制类型转换</p></li><li><p>把0直接转换成一个void(*)()的函数指针，然后去调用0地址处的函数</p></li></ol><p>有趣的代码<code>void (* signal(int ,void(*)(int)) )(int);</code></p><ol><li>上述代码是一次函数声明</li><li>声明的函数叫：signal</li><li>signal函数的第一个参数是int类型</li><li>signal函数的第二个参数是一个函数指针类型，该函数指针指向的函数参数是int，返回值是void</li><li>signal函数的返回类型也是一个函数指针类型，该函数指向的函数参数是int，返回类型是void</li><li><code>typedef void(* pf_t)(int);</code>&#x2F;&#x2F;把void(*)(int)函数指针类型换名为pf_t</li><li><code>pf_t signal(int,pf_t);</code></li></ol><h2 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h2><p>函数指针</p><p><code>int(*pf)(int,int)</code></p><p>函数指针数组</p><p><code>int (*pfArr[4])(int,int)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//int (*pt)(const char *str,double d) = &amp;test;</span><br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;Add,Sub&#125;;<br>    <span class="hljs-type">int</span> sum = pfArr[<span class="hljs-number">0</span>](<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> anw = pfArr[<span class="hljs-number">1</span>](<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,sum,anw);<span class="hljs-comment">//3 2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用函数指针数组实现简易计算器</p><p>函数指针数组的实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//写一个计算器</span><br><span class="hljs-comment">//加减乘除</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********1.add  2.sub*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********3.mul  4.div*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********0.exit      *********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Mul</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x / y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> anw = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">5</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;<span class="hljs-number">0</span>, Add, Sub, Mul, Div&#125;;<br>    <span class="hljs-keyword">do</span> &#123;<br>    Menu();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br>    <span class="hljs-keyword">if</span>(input == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>(input &gt;= <span class="hljs-number">1</span> &amp;&amp; input &lt;= <span class="hljs-number">4</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个操作数:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        anw = pfArr[input](x,y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,anw);<br>    &#125;<br>    <span class="hljs-comment">// switch (input) &#123;</span><br>    <span class="hljs-comment">// case 1:printf(&quot;%d\n&quot;,Add(x, y));break;</span><br>    <span class="hljs-comment">// case 2:printf(&quot;%d\n&quot;,Sub(x, y));break;</span><br>    <span class="hljs-comment">// case 3:printf(&quot;%d\n&quot;,Mul(x, y));break;</span><br>    <span class="hljs-comment">// case 4:printf(&quot;%d\n&quot;,Div(x, y));break;</span><br>    <span class="hljs-comment">// case 0:printf(&quot;QUIT\n&quot;);break;</span><br>    <span class="hljs-comment">// default:printf(&quot;ERROR\n&quot;);break;</span><br>    <span class="hljs-comment">// &#125;</span><br>    &#125;<span class="hljs-keyword">while</span> (input);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br>函数指针<br><span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>函数指针数组<br><span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>指向函数指针数组的指针<br><span class="hljs-type">int</span> (* (*ptr)[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &amp;pfArr<br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个通过函数指针调用的函数。如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *c[] = &#123;<span class="hljs-string">&quot;ENTER&quot;</span>,<span class="hljs-string">&quot;NEW&quot;</span>,<span class="hljs-string">&quot;POINT&quot;</span>,<span class="hljs-string">&quot;FIRST&quot;</span>&#125;;<br>    <span class="hljs-type">char</span> **cp[] = &#123;c + <span class="hljs-number">3</span>, c + <span class="hljs-number">2</span>, c + <span class="hljs-number">1</span>, c&#125;;<br>    <span class="hljs-type">char</span> ***cpp = cp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,**++cpp);         <span class="hljs-comment">//POINT</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*--*++cpp+<span class="hljs-number">3</span>);     <span class="hljs-comment">//ER</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*cpp[<span class="hljs-number">-2</span>]+<span class="hljs-number">3</span>);      <span class="hljs-comment">//ST</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,cpp[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);   <span class="hljs-comment">//EW</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针的进阶&quot;&gt;&lt;a href=&quot;#指针的进阶&quot; class=&quot;headerlink&quot; title=&quot;指针的进阶&quot;&gt;&lt;/a&gt;指针的进阶&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;指针就是个变量，用来存放地址，地址唯一标识一块内存空间&lt;/li&gt;
&lt;li&gt;指针的大小是固定的4&amp;#x2F</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
</feed>
