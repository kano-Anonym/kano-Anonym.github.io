<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>kano</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-25T11:18:13.580Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kano</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言指针进阶知识</title>
    <link href="http://example.com/2023/07/24/c_point_knowledge/"/>
    <id>http://example.com/2023/07/24/c_point_knowledge/</id>
    <published>2023-07-24T09:01:10.000Z</published>
    <updated>2023-07-25T11:18:13.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针的进阶"><a href="#指针的进阶" class="headerlink" title="指针的进阶"></a>指针的进阶</h1><ol><li>指针就是个变量，用来存放地址，地址唯一标识一块内存空间</li><li>指针的大小是固定的4&#x2F;8个字节（32位平台&#x2F;64位平台）</li><li>指针是有类型，指针的类型决定了指针的+&#x2F;-整数的步长，指针解引用操作的时候的权限</li><li>指针的运算</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>];<span class="hljs-comment">//整型数组</span><br><br><span class="hljs-type">int</span> *parr1[<span class="hljs-number">10</span>];<span class="hljs-comment">//指针数组</span><br><br><span class="hljs-type">int</span> (*parr2)[<span class="hljs-number">10</span>];<span class="hljs-comment">//数组指针</span><br><br><span class="hljs-type">int</span> ((*parr3)[<span class="hljs-number">10</span>])[<span class="hljs-number">5</span>]<span class="hljs-comment">//指针数组（存放数组指针的数组）</span><br><span class="hljs-comment">//parr3有十个元素，每个元素指向一个有五个元素的数组</span><br></code></pre></td></tr></table></figure><h2 id="数组传参和指针传参"><a href="#数组传参和指针传参" class="headerlink" title="数组传参和指针传参"></a>数组传参和指针传参</h2><ol><li><p>一维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>])</span>       <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">20</span>])</span>     <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>        <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> *arr2[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">//一维整型指针数组</span><br>    test(arr);<br>    test2(arr2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二维数组传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125; <br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][<span class="hljs-number">5</span>])</span>          <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span>              <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr[<span class="hljs-number">5</span>])</span>           <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> (*arr)[<span class="hljs-number">5</span>])</span>         <span class="hljs-comment">//ok</span><br>&#123;&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **arr)</span>             <span class="hljs-comment">//不行</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    test(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p + i));<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-type">int</span> *p = arr;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    print(p,sz);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二级指针传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> **ptr)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>,**ptr);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p = &amp;n;<br>    <span class="hljs-type">int</span> **pp = &amp;p;<br>    test(pp);<br>    test(&amp;p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// //Add 和 &amp;Add 都是函数的地址，没有区别</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,Add);</span><br>    <span class="hljs-comment">// printf(&quot;%p\n&quot;,&amp;Add);</span><br>    <span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) = &amp;Add;<br>    <span class="hljs-comment">//int (*pf)(int x,int y) = Add;</span><br>    <span class="hljs-comment">//pf是函数指针变量</span><br>    <span class="hljs-type">int</span> sum = (*pf)(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//int sum = pf(3,5);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有趣的代码<code>( *( void(*)() )0 )()</code>:</p><ol><li><p>( void(*)() )0 –&gt;把0当作一个函数的地址，强制类型转换</p></li><li><p>把0直接转换成一个void(*)()的函数指针，然后去调用0地址处的函数</p></li></ol><p>有趣的代码<code>void (* signal(int ,void(*)(int)) )(int);</code></p><ol><li>上述代码是一次函数声明</li><li>声明的函数叫：signal</li><li>signal函数的第一个参数是int类型</li><li>signal函数的第二个参数是一个函数指针类型，该函数指针指向的函数参数是int，返回值是void</li><li>signal函数的返回类型也是一个函数指针类型，该函数指向的函数参数是int，返回类型是void</li><li><code>typedef void(* pf_t)(int);</code>&#x2F;&#x2F;把void(*)(int)函数指针类型换名为pf_t</li><li><code>pf_t signal(int,pf_t);</code></li></ol><h2 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h2><p>函数指针</p><p><code>int(*pf)(int,int)</code></p><p>函数指针数组</p><p><code>int (*pfArr[4])(int,int)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//int (*pt)(const char *str,double d) = &amp;test;</span><br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;Add,Sub&#125;;<br>    <span class="hljs-type">int</span> sum = pfArr[<span class="hljs-number">0</span>](<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> anw = pfArr[<span class="hljs-number">1</span>](<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,sum,anw);<span class="hljs-comment">//3 2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用函数指针数组实现简易计算器</p><p>函数指针数组的实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//写一个计算器</span><br><span class="hljs-comment">//加减乘除</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********1.add  2.sub*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********3.mul  4.div*********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********0.exit      *********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Mul</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Div</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x / y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> anw = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">5</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &#123;<span class="hljs-number">0</span>, Add, Sub, Mul, Div&#125;;<br>    <span class="hljs-keyword">do</span> &#123;<br>    Menu();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br>    <span class="hljs-keyword">if</span>(input == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>(input &gt;= <span class="hljs-number">1</span> &amp;&amp; input &lt;= <span class="hljs-number">4</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个操作数:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        anw = pfArr[input](x,y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,anw);<br>    &#125;<br>    <span class="hljs-comment">// switch (input) &#123;</span><br>    <span class="hljs-comment">// case 1:printf(&quot;%d\n&quot;,Add(x, y));break;</span><br>    <span class="hljs-comment">// case 2:printf(&quot;%d\n&quot;,Sub(x, y));break;</span><br>    <span class="hljs-comment">// case 3:printf(&quot;%d\n&quot;,Mul(x, y));break;</span><br>    <span class="hljs-comment">// case 4:printf(&quot;%d\n&quot;,Div(x, y));break;</span><br>    <span class="hljs-comment">// case 0:printf(&quot;QUIT\n&quot;);break;</span><br>    <span class="hljs-comment">// default:printf(&quot;ERROR\n&quot;);break;</span><br>    <span class="hljs-comment">// &#125;</span><br>    &#125;<span class="hljs-keyword">while</span> (input);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;&#125;<br>函数指针<br><span class="hljs-type">int</span> (*pf)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>函数指针数组<br><span class="hljs-type">int</span> (*pfArr[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)<br>指向函数指针数组的指针<br><span class="hljs-type">int</span> (* (*ptr)[<span class="hljs-number">2</span>])(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) = &amp;pfArr<br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是一个通过函数指针调用的函数。如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *c[] = &#123;<span class="hljs-string">&quot;ENTER&quot;</span>,<span class="hljs-string">&quot;NEW&quot;</span>,<span class="hljs-string">&quot;POINT&quot;</span>,<span class="hljs-string">&quot;FIRST&quot;</span>&#125;;<br>    <span class="hljs-type">char</span> **cp[] = &#123;c + <span class="hljs-number">3</span>, c + <span class="hljs-number">2</span>, c + <span class="hljs-number">1</span>, c&#125;;<br>    <span class="hljs-type">char</span> ***cpp = cp;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,**++cpp);         <span class="hljs-comment">//POINT</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*--*++cpp+<span class="hljs-number">3</span>);     <span class="hljs-comment">//ER</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,*cpp[<span class="hljs-number">-2</span>]+<span class="hljs-number">3</span>);      <span class="hljs-comment">//ST</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,cpp[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);   <span class="hljs-comment">//EW</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针的进阶&quot;&gt;&lt;a href=&quot;#指针的进阶&quot; class=&quot;headerlink&quot; title=&quot;指针的进阶&quot;&gt;&lt;/a&gt;指针的进阶&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;指针就是个变量，用来存放地址，地址唯一标识一块内存空间&lt;/li&gt;
&lt;li&gt;指针的大小是固定的4&amp;#x2F</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C_Language" scheme="http://example.com/tags/C-Language/"/>
    
  </entry>
  
</feed>
